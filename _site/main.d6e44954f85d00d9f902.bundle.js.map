{"version":3,"file":"main.d6e44954f85d00d9f902.bundle.js","sources":["webpack:///./dile-modal.js"],"sourcesContent":["import { LitElement, html, css } from 'lit-element';\n\nexport class DileModal extends LitElement {\n\n  static get properties() {\n    return {\n      _toChange: { type: Boolean },\n      /**\n       * If true the modal box is in opened status.\n       */\n      opened: { type: Boolean },\n      /**\n       * If true the modal box displays a close icon\n       */\n      showCloseIcon: { type: Boolean },\n    }\n  }\n\n  constructor() {\n    super();\n    this._toChange = false;\n    this.opened = false;\n    this.showCloseIcon = false;\n  }\n  \n  static get styles() { \n    return css`\n      * {\n        box-sizing: border-box;\n      }\n      :host {\n        display: block;\n      }\n      section {\n        position: fixed;\n        left: 0;\n        top: 0;\n        height: 100vh;\n        width: 100vw;\n        display: none;\n        transition: opacity var(--dile-modal-animation-duration, 0.3s) ease-in;\n        -webkit-transition: opacity var(--dile-modal-animation-duration, 0.3s) ease-in;\n        align-items: center;\n        justify-content: center;\n        z-index: var(--dile-modal-z-index, 100);     \n        background-color: var(--dile-modal-background-color, rgba(30,30,30, 0.8));\n      }\n      .content {\n        display: block;\n        position: relative;\n        z-index: var(--dile-modal-content-z-index, 101);\n        width: var(--dile-modal-width, 280px);\n        min-width: var(--dile-modal-min-width, 250px);      \n        max-width: var(--dile-modal-max-width, 100vw);\n        height: var(--dile-modal-height, auto);\n        max-height: var(--dile-modal-max-height, 100vh);\n        background-color: var(--dile-modal-content-background-color, #fff);\n        box-shadow: var(--dile-modal-content-shadow-displacement, 6px) var(--dile-modal-content-shadow-displacement, 6px) var(--dile-modal-content-shadow-blur, 16px) var(--dile-modal-content-shadow-color, #000);\n        border-radius: var(--dile-modal-border-radius, 15px);\n        padding: var(--dile-modal-content-padding, 1em) 0 var(--dile-modal-content-padding, 1em) var(--dile-modal-content-padding, 1em);\n      }\n      article {\n        overflow: auto;\n        max-height: 100%;\n        height: 100%;\n        padding-right: var(--dile-modal-content-padding, 1em);\n      }\n      .transparent {\n        opacity: 0;\n      }\n      .opaque {\n        opacity: 1;\n        display: flex !important;\n      }\n      .opened {\n        display: flex !important;\n      }\n      span{\n        position: absolute;\n        top: 5px;\n        right: 18px;\n        z-index: 1002; \n      }\n      span svg {\n        width: var(--dile-modal-close-icon-size, 24px);\n        height: var(--dile-modal-close-icon-size, 24px);\n        cursor: pointer;\n      }\n      span path {\n        fill: var(--dile-modal-close-icon-color, #888);\n      }\n      span path[fill=\"none\"] {\n        fill: transparent;\n      }\n      .contentIconSeparation {\n        padding-top: var(--dile-modal-close-icon-size, 24px);\n      }\n    `;\n  }\n\n  render() {\n    return html`\n      <section class=\"${this.getModalClass(this.opened, this._toChange)}\" @click=\"${this._backgroundModalClick}\" @transitionend=\"${this.animationEnd}\">\n        <div class=\"content\" @click=\"${this.contentClick}\">\n          ${ this.showCloseIcon \n            ? html`<span @click=\"${this.close}\">${this.closeIcon}</span>`\n            : ''\n          }\n          <article class=\"${ this.showCloseIcon ? 'contentIconSeparation' : '' }\">\n              <slot></slot>\n          </article>\n        </div>\n      </section>\n    `;\n  }\n\n  get closeIcon() {\n    return html`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm3.59-13L12 10.59 8.41 7 7 8.41 10.59 12 7 15.59 8.41 17 12 13.41 15.59 17 17 15.59 13.41 12 17 8.41z\"/></svg>`;\n  }\n\n  getModalClass(opened, _toChange) {\n    if(!opened && !_toChange) {\n      return 'transparent';\n    }\n    if(opened && _toChange) {\n      return 'transparent opened'\n    }\n    if(opened && !_toChange) {\n      return 'opaque'\n    }\n    if(!opened && _toChange) {\n      return 'transparent opened'\n    }\n  }\n\n  open() {\n    this.opened = true;\n    this._toChange = true;\n    setTimeout(() => {\n      this._toChange = false;\n    }, 50);\n  }\n\n  _backgroundModalClick(e) {\n    this.close()\n    this.dispatchEvent(new CustomEvent('dile-modal-background-closed', {\n      bubbles: true,\n      composed: true,\n      detail: this\n    }));\n    e.stopPropagation();\n  }\n\n  close() {\n    this.opened = false;\n    this._toChange = true;\n    this.dispatchEvent(new CustomEvent('dile-modal-closed', {\n      bubbles: true,\n      composed: true,\n      detail: this\n    }));\n  }\n  \n  animationEnd() {\n    this._toChange = false;\n  }\n\n  contentClick(e) {\n    e.stopPropagation();\n  }\n}\ncustomElements.define('dile-modal', DileModal);"],"mappings":"AAEA","sourceRoot":""}